  Additional Resources
    This question uses the acgk8s cluster. After logging in to the exam server, switch to the correct context with the command kubectl config use-context acgk8s.

    Each of the objectives represents a task which you will need to complete using the available cluster and server(s). Read each objective carefully and complete the task specified.

    For some objectives, you may need to ssh into other nodes or servers from the exam server. You can do so using the hostname/node name, i.e. ssh acgk8s-worker1.

  Note: You cannot ssh into another node, or use kubectl to connect to the cluster, from any node other than the root node. Once you have completed the necessary tasks on a server, be sure to exit and return to the root node before proceeding.

    If you need to assume root privileges on a server, you can do so with sudo -i.

    You can run the verification script located at /home/cloud_user/verify.sh at any time to check your work!

    Learning Objectives
    0 of 3 completed
    Create a PersistentVolume
    Create a PersistentVolume called host-storage-pv. Configure this PersistentVolume so that volumes that use it can be expanded in the future.
  Note: This may require you to create additional objects.

    Configure the PersistentVolume to use a hostPath for storage, located at /etc/data.
    Configure the PersistentVolumes so that it can be automatically reused if all claims are deleted.
    Create a Pod That Uses the `PersistentVolume` for Storage
    Create a pod called pv-pod in the auth Namespace. Configure this Pod so that it uses the host-storage-pv PersistentVolume for storage.

  Note: This will require the creation of a PersistentVolumeClaim.

    Name the PersistentVolumeClaim host-storage-pvc. Give your PersistentVolumeClaim a size of 100Mi.

    Use the busybox image for this pod, and configure it to run the command sh -c while true; do echo success > /output/output.log; sleep 5; done.
    Mount the volume that uses the PersistentVolume for storage, such that the /output directory ultimately writes to the PersistentVolume.
    Expand the `PersistentVolumeClaim`
    Expand the PersistentVolumeClaim so that the requested storage size is 200Mi.


Answer


Certified Kubernetes Administrator (CKA): Practice Exam: Part 7
  Introduction
  This lab provides practice scenarios to help prepare you for the Certified Kubernetes Administrator (CKA) Exam. You will be presented with tasks to complete, as well as server(s) and/or an existing Kubernetes cluster to complete them in. You will need to use your knowledge of Kubernetes to successfully complete the provided tasks, much like you would on the real CKA exam. Good luck!

  Solution
Log in to the server using the credentials provided:

  ssh cloud_user@<PUBLIC_IP_ADDRESS>
  Create a PersistentVolume
Switch to the acgk8s context:
  kubectl config use-context acgk8s
Create a YAML file named localdisk.yml:
  vim localdisk.yml
In the file, paste the following:
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: localdisk
provisioner: kubernetes.io/no-provisioner
allowVolumeExpansion: true
Save the file:
  ESC
  :wq
Create a storage class using the YAML file:
  kubectl create -f localdisk.yml
Create a YAML file named host-storage-pv.yml:
  vim host-storage-pv.yml
In the file, paste the following:
apiVersion: v1
kind: PersistentVolume
metadata:
  name: host-storage-pv
spec:
  storageClassName: localdisk
  persistentVolumeReclaimPolicy: Recycle
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /etc/data
Save the file:
  ESC
  :wq
Create the PersistentVolume:
  kubectl create -f host-storage-pv.yml
Check the status of the volume:
  kubectl get pv host-storage-pv
Check the status of the exam objectives:
  ./verify.sh
  Create a Pod That Uses the PersistentVolume for Storage
Create a YAML file named host-storage-pvc.yml:
  vim host-storage-pvc.yml
In the file, paste the following:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: host-storage-pvc
  namespace: auth
spec:
  storageClassName: localdisk
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
Save the file:
  ESC
  :wq
Create the PersistentVolumeClaim:
  kubectl create -f host-storage-pvc.yml
Check the status of the PersistentVolumeClaim:
  kubectl get pv
Verify that the claim is bound to the volume:
  kubectl get pvc -n auth
Create a YAML file named pv-pod.yml:
  vim pv-pod.yml
In the file, paste the following:
apiVersion: v1
kind: Pod
metadata:
  name: pv-pod
  namespace: auth
spec:
  containers:
    - name: busybox
      image: busybox
      command: ['sh', '-c', 'while true; do echo success > /output/output.log; sleep 5; done']
      volumeMounts:
        - name: pv-storage
          mountPath: /output
  volumes:
    - name: pv-storage
      persistentVolumeClaim:
        claimName: host-storage-pvc
Save the file:
  ESC
  :wq
Create the pod:
  kubectl create -f pv-pod.yml
Check the status of the exam objectives:
  ./verify.sh
  Expand the PersistentVolumeClaim
Edit host-storage-pvc:
  kubectl edit pvc host-storage-pvc -n auth
  Under spec, change the storage value to 200Mi.
Save the file:
  ESC
  :wq
Check the status of the exam objectives:
  ./verify.sh